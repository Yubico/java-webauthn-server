buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.cinnober.gradle:semver-git:2.4.0'
  }
}
plugins {
  id 'com.github.kt3k.coveralls' version '2.8.4'
  id 'io.codearte.nexus-staging' version '0.9.0'
  id 'io.franzbecker.gradle-lombok' version '3.1.0'
}

import io.franzbecker.gradle.lombok.LombokPlugin
import io.franzbecker.gradle.lombok.task.DelombokTask

project.ext.isCiBuild = System.env.CI == 'true'

project.ext.publishEnabled = !isCiBuild &&
  project.hasProperty('yubicoPublish') && project.yubicoPublish &&
  project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')

if (publishEnabled) {
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    stagingProfileId = '6c61426e6529d'
  }
}

wrapper {
  gradleVersion = '6.1'
}

allprojects {
  ext.snapshotSuffix = "<count>.g<sha>-SNAPSHOT<dirty>"
  ext.dirtyMarker = "-DIRTY"

  apply plugin: 'com.cinnober.gradle.semver-git'
  apply plugin: 'idea'

  group = 'com.yubico'

  idea.module {
    downloadJavadoc = true
    downloadSources = true
  }
}

Map<String, String> dependencyVersions = [
  'ch.qos.logback:logback-classic:1.2.3',
  'com.augustcellars.cose:cose-java:1.0.0',
  'com.fasterxml.jackson.core:jackson-databind:2.11.0',
  'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.0',
  'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.11.0',
  'com.google.guava:guava:19.0',
  'com.upokecenter:cbor:4.0.1',
  'javax.activation:activation:1.1.1',
  'javax.ws.rs:javax.ws.rs-api:2.1',
  'javax.xml.bind:jaxb-api:2.3.0',
  'junit:junit:4.12',
  'org.apache.httpcomponents:httpclient:4.5.2',
  'org.bouncycastle:bcpkix-jdk15on:1.62',
  'org.bouncycastle:bcprov-jdk15on:1.62',
  'org.eclipse.jetty:jetty-server:9.4.9.v20180320',
  'org.eclipse.jetty:jetty-servlet:9.4.9.v20180320',
  'org.glassfish.jersey.containers:jersey-container-servlet-core:2.31',
  'org.glassfish.jersey.containers:jersey-container-servlet:2.26',
  'org.glassfish.jersey.inject:jersey-hk2:2.26',
  'org.mockito:mockito-core:2.27.0',
  'org.scala-lang:scala-library:2.13.1',
  'org.scalacheck:scalacheck_2.13:1.14.0',
  'org.scalatest:scalatest_2.13:3.0.8',
  'org.slf4j:slf4j-api:1.7.25',
].collectEntries { [(it.split(':')[0..1].join(':')): it] }
rootProject.ext.addVersion = { dep -> dependencyVersions[dep] }

subprojects {
  apply plugin: LombokPlugin

  lombok {
    version '1.18.8'
    sha256 = '0396952823579b316a0fe85cbd871bbb3508143c2bcbd985dd7800e806cb24fc'
  }

  repositories {
    mavenLocal()

    maven { url "https://repo.maven.apache.org/maven2" }
  }
}

allprojects {
  evaluationDependsOnChildren()
}

task assembleJavadoc(type: Sync) {
  from("docs/index.html") {
    expand project.properties
  }
  destinationDir = file("${rootProject.buildDir}/javadoc")
}

String getGitCommit() {
  def proc = "git rev-parse HEAD".execute(null, projectDir)
  proc.waitFor()
  if (proc.exitValue() != 0) {
    throw new RuntimeException("Failed to get git commit ID");
  }
  return proc.text.trim()
}

subprojects { project ->

  sourceCompatibility = 1.8
  targetCompatibility = 1.8


  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  tasks.withType(AbstractArchiveTask) {
    from(rootProject.file('COPYING'))
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  tasks.withType(Sign) {
    it.dependsOn check
  }

  test {
    testLogging {
      showStandardStreams = isCiBuild
    }
  }

  if (project.hasProperty('publishMe') && project.publishMe) {
    task sourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from sourceSets.main.allSource
    }

    task delombok(type: DelombokTask, dependsOn: classes) {
      ext.outputDir = file("${buildDir}/delombok")
      outputs.dir outputDir
      sourceSets.main.java.srcDirs.each {
        if (!it.exists()) {
          it.mkdirs()
        }
        inputs.dir it
        args(it, '-d', outputDir)
      }
      doFirst {
        outputDir.deleteDir()
      }
    }

    javadoc {
      dependsOn delombok
      source = delombok.outputDir
      options.encoding = 'UTF-8'
      options.addStringOption('charset', 'UTF-8')
    }

    task javadocJar(type: Jar) {
      archiveClassifier = 'javadoc'
      from javadoc
    }

    rootProject.tasks.assembleJavadoc {
      dependsOn javadoc
      inputs.dir javadoc.destinationDir
      from(javadoc.destinationDir) {
        into project.name
      }
    }
  }

  if (publishEnabled && project.hasProperty('publishMe') && project.publishMe) {

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    publishing {
      publications {
        jars(MavenPublication) {
          from components.java
          artifact javadocJar
          artifact sourcesJar

          pom {
            name = project.name
            description = project.description
            url = 'https://developers.yubico.com/java-webauthn-server/'

            developers {
              developer {
                id = 'emil'
                name = 'Emil Lundberg'
                email = 'emil@yubico.com'
              }
            }

            licenses {
              license {
                name = 'BSD-license'
                comments = 'Revised 2-clause BSD license'
              }
            }

            scm {
              url = 'scm:git:git://github.com/Yubico/java-webauthn-server.git'
              connection = 'scm:git:git://github.com/Yubico/java-webauthn-server.git'
              developerConnection = 'scm:git:ssh://git@github.com/Yubico/java-webauthn-server.git'
              tag = 'HEAD'
            }
          }
        }
      }

      repositories {
        maven {
          name = "sonatypeNexus"
          url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
          credentials {
            username ossrhUsername
            password ossrhPassword
          }
        }
      }
    }

    signing {
      useGpgCmd()
      sign publishing.publications.jars
    }
  }
}

task pitestMerge(type: com.yubico.gradle.pitest.tasks.PitestMergeTask)

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
}
tasks.coveralls {
  inputs.files pitestMerge.outputs.files
}
