buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.cinnober.gradle:semver-git:2.5.0'
  }
}
plugins {
  id 'java-platform'

  // The root project has no sources, but the dependency platform also needs to be published as an artifact
  // See https://docs.gradle.org/current/userguide/java_platform_plugin.html
  // See https://github.com/Yubico/java-webauthn-server/issues/93#issuecomment-822806951
  id 'project-convention-publish'
  id 'org.jreleaser' version '1.19.0'  // Regression in JReleaser 1.20.0: https://github.com/jreleaser/jreleaser/issues/1981
}

import com.yubico.gradle.GitUtils

project.ext.isCiBuild = System.env.CI == 'true'
project.ext.publishEnabled = !isCiBuild && project.findProperty('yubicoPublish') == 'true'

wrapper {
  gradleVersion = '8.14.3'
}

dependencies {
  constraints {
    api(constraintLibs.bundles.jackson)
    api(constraintLibs.cbor)
    api(constraintLibs.guava)
    api(constraintLibs.httpclient5)
    api(constraintLibs.slf4j)
  }
}

allprojects {
  apply plugin: 'idea'

  if (System.env.VERSION) {
    it.version = System.env.VERSION
  } else {
    ext.snapshotSuffix = "<count>.g<sha>-SNAPSHOT<dirty>"
    ext.dirtyMarker = "-DIRTY"
    apply plugin: 'com.cinnober.gradle.semver-git'
  }

  idea.module {
    downloadJavadoc = true
    downloadSources = true
  }

  repositories {
    mavenCentral()
  }

  tasks.withType(AbstractTestTask) {
    testLogging {
      showStandardStreams = isCiBuild
    }
  }
}

task checkJavaVersionBeforeRelease {
  doFirst {
    if (JavaVersion.current() != JavaVersion.VERSION_17) {
      throw new RuntimeException('Release must be built using JDK 17. Current JDK version: ' + JavaVersion.current())
    }
  }
}

allprojects {
  tasks.withType(AbstractCompile) { shouldRunAfter checkJavaVersionBeforeRelease }
  tasks.withType(AbstractTestTask) { shouldRunAfter checkJavaVersionBeforeRelease }
  tasks.withType(Sign) {
    dependsOn checkJavaVersionBeforeRelease
  }

  tasks.withType(Jar) {
    doFirst {
      if (GitUtils.getGitCommit(projectDir) == null) {
        throw new RuntimeException("Failed to get git commit ID")
      }
    }
  }
}

task pitestMerge(type: com.yubico.gradle.pitest.tasks.PitestMergeTask)

jreleaser {
  signing {
    active = 'ALWAYS'
    mode = 'COMMAND'
    armored = true
    verify = false
  }
  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = 'ALWAYS'
          url = 'https://central.sonatype.com/api/v1/publisher'
          stagingRepository('build/staging-deploy')
        }
      }
    }
  }
}
